@using System.Text.Json;
@{
    /*var customer = new VuelingExchangeManagerClient.Models.Customer
            {
                Id = 1,
                Name = "John Doe",
                Email = "johndoe@example.com",
                Wallets = new List<VuelingExchangeManagerClient.Models.Wallet>
        {
            new VuelingExchangeManagerClient.Models.Wallet
            {
                Id = 1,
                Coin = new VuelingExchangeManagerClient.Models.Coin { Name = "Bitcoin" },
                Balance = 2.0M,
                BalanceHistory = new List<VuelingExchangeManagerClient.Models.BalanceHistory>
                {
                    new VuelingExchangeManagerClient.Models.BalanceHistory
                    {
                        Id = 1,
                        Variation = 0.2M,
                        Category = "Gasto",
                        Date = DateTime.Now,
                        Description = "Compra de café"
                    },
                }
            },
            new VuelingExchangeManagerClient.Models.Wallet
            {
                Id = 2,
                Coin = new VuelingExchangeManagerClient.Models.Coin { Name = "USD" },
                Balance = 2.0M,
                BalanceHistory = new List<VuelingExchangeManagerClient.Models.BalanceHistory>
                {
                    new VuelingExchangeManagerClient.Models.BalanceHistory
                    {
                        Id = 2,
                        Variation = 0.2M,
                        Category = "Gasto",
                        Date = DateTime.Now.AddDays(-1),
                        Description = "Compra de café"
                    },
                }
            },
        }
            };*/
    var jwtToken = ViewBag.JwtToken;
    var userId = ViewBag.UserId;

    var options = new JsonSerializerOptions
            {
                IncludeFields = true,
            };

    var balanceHistoryJson = JsonSerializer.Serialize(Model.Item1.Wallets.SelectMany(w => w.BalanceHistory), options);

}
@model Tuple<VuelingExchangeManagerClient.Models.Customer>




<!DOCTYPE html>
<html>
<head>
    <title>Gestión de Finanzas</title>
    <style>
        body {
            font-family: Arial, sans-serif;
        }

        .cartera, .cliente {
            border: 1px solid #000;
            padding: 20px;
            margin: 20px 0;
        }

            .cartera h2, .cliente h2 {
                margin: 0;
            }

            .cartera p, .cliente p {
                margin: 10px 0;
            }
    </style>
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.5.1/jquery.min.js"></script>
</head>
<body>
    <h1>Gestión de Finanzas Personales</h1>

    <div class="cliente">
        <h2>@Model.Item1.Name</h2>
        <p>ID: @Model.Item1.Id</p>
        <p>Email: @Model.Item1.Email</p>
    </div>

    <label for="wallets">Escoge una cartera:</label>
    <select id="wallets" name="wallets">
        @foreach (var cartera in Model.Item1.Wallets)
        {
            <option value="@cartera.Id">@cartera.Coin.Name</option>
        }
    </select>

    <button class="show-add-wallet-form-btn">Añadir Cartera</button>

    <div class="add-wallet-modal modal" style="display: none;">
        <form class="balance-form" action="@Url.Action("AddWallet", "Home")" method="post">
            <div>
                <label for="coinName">Nombre de la Moneda:</label>
                <input type="text" id="coinName" name="coinName" required />
            </div>
            <div>
                <button type="submit">Crear Cartera</button>
            </div>
        </form>
    </div>

    @foreach (var cartera in Model.Item1.Wallets)
    {
        <div class="cartera" id="wallet-@cartera.Id" style="display: none;">
            <h2>@cartera.Coin.Name</h2>
            <p>Cantidad: @cartera.Balance</p>

            @{
                var lastBalance = cartera.BalanceHistory.LastOrDefault();
                if (lastBalance != null)
                {
                    <h3>Último balance:</h3>
                    <p>Fecha: @lastBalance.Date</p>
                    <p>Variación: @lastBalance.Variation</p>
                    <p>Categoría: @lastBalance.Category</p>
                    <p>Descripción: @lastBalance.Description</p>
                }
                else
                {
                    <p>No hay historial de balance disponible.</p>
                }

                <button class="show-form-btn">Añadir Movimiento</button>

                <div class="modal">
                    <form class="balance-form" action="@Url.Action("AddBalance", "Home")" method="post">
                        <input type="hidden" id="isIncome" name="isIncome" value="false" />
                        <input type="hidden" name="walletId" value="@cartera.Id" />
                        <input type="hidden" name="coinName" value="@cartera.Coin.Name" />
                        <div>
                            <label for="variation">Variación:</label>
                            <input type="number" id="variation" name="variation" step="0.01" required />
                        </div>
                        <div>
                            <label for="category">Categoría:</label>
                            <input type="text" id="category" name="category" required />
                        </div>
                        <div>
                            <label for="description">Descripción:</label>
                            <input type="text" id="description" name="description" required />
                        </div>
                        <div>
                            <button type="submit" class="income-btn" style="background-color: green;">Ingreso</button>
                            <button type="submit" class="expense-btn" style="background-color: red;">Gasto</button>
                        </div>
                    </form>
                </div>
            }
        </div>
    }

    
    <canvas id="ingresosGastosChart"></canvas>

    <div class="balances">
        @foreach (var cartera in Model.Item1.Wallets)
        {
            @foreach (var balance in cartera.BalanceHistory)
            {
                <h2>@cartera.Coin.Name</h2>
                <p>Fecha: @balance.Date</p>
                <p>Variación: @balance.Variation</p>
                <p>Categoría: @balance.Category</p>
                <p>Descripción: @balance.Description</p>
                <hr />
            }
        }
    </div>


    <!--Income bttn -->
    <script>
        document.querySelector('.income-btn').addEventListener('click', function (e) {
            document.querySelector('#isIncome').value = "true";
        });

        document.querySelector('.expense-btn').addEventListener('click', function (e) {
            document.querySelector('#isIncome').value = "false";
        });
    </script>

    <!--Graphic balance -->
    <script>
        // decodifica los datos JSON de BalanceHistory en un objeto JavaScript
        var balanceHistoryData = JSON.parse('@Html.Raw(balanceHistoryJson)');

        // calcula los ingresos y gastos totales
        var totalIncomes = 0;
        var totalExpenses = 0;
        for (var i = 0; i < balanceHistoryData.length; i++) {
            console.log("Record: " + i + ", IsIncome: " + balanceHistoryData[i].IsIncome + ", Variation: " + balanceHistoryData[i].Variation);
            if (balanceHistoryData[i].IsIncome) {
                totalIncomes += balanceHistoryData[i].Variation;
            } else {
                totalExpenses += balanceHistoryData[i].Variation;
            }
        }

        // crear un nuevo gráfico de pie
        var ctx = document.getElementById('ingresosGastosChart').getContext('2d');
        var chart = new Chart(ctx, {
            type: 'pie',
            data: {
                labels: ['Ingresos', 'Gastos'],
                datasets: [{
                    data: [totalIncomes, totalExpenses],
                    backgroundColor: [
                        'rgba(75, 192, 192, 0.5)',
                        'rgba(255, 99, 132, 0.5)'
                    ],
                    borderColor: [
                        'rgba(75, 192, 192, 1)',
                        'rgba(255, 99, 132, 1)'
                    ],
                    borderWidth: 1
                }]
            },
        });
    </script>

    <!--Wallet selector -->
    <script>
        // Función para actualizar la cartera seleccionada
        function updateSelectedWallet() {
            var selectedWalletId = $("#wallets").val();

            // Oculta todas las carteras
            $(".cartera").hide();

            // Muestra la cartera seleccionada
            $("#wallet-" + selectedWalletId).show();
        }

        // Ejecuta updateSelectedWallet cuando se cambia la opción seleccionada
        $("#wallets").change(function () {
            updateSelectedWallet();
        });

        // Muestra la primera cartera al cargar la página
        $(document).ready(function () {
            updateSelectedWallet();
        });
    </script>

    <!--Modal add wallet movement-->
    <script>
        // Función para mostrar el modal cuando se hace clic en el botón
        $(".show-form-btn").click(function () {
            $(this).next(".modal").show();
        });

        // Cerrar el modal cuando se hace clic fuera del formulario
        $(window).click(function (e) {
            if ($(e.target).hasClass("modal")) {
                $(".modal").hide();
            }
        });
    </script>
    <style>
        /* Estilos para el modal y su contenido */
        .modal {
            display: none;
            position: fixed;
            z-index: 1;
            left: 0;
            top: 0;
            width: 100%;
            height: 100%;
            overflow: auto;
            background-color: rgba(0,0,0,0.4);
        }

        .balance-form {
            background-color: #fefefe;
            margin: 15% auto;
            padding: 20px;
            border: 1px solid #888;
            width: 30%;
        }
    </style>

    <!--Modal add wallet -->
    <script>
        // Función para mostrar el modal cuando se hace clic en el botón
        $(".show-add-wallet-form-btn").click(function () {
            $(".add-wallet-modal").show();
        });

        // Cerrar el modal cuando se hace clic fuera del formulario
        $(window).click(function (e) {
            if ($(e.target).hasClass("modal")) {
                $(".modal").hide();
            }
        });

    </script>
    <style>
        
        .add-wallet-modal {
            display: none;
            position: fixed;
            z-index: 1;
            left: 0;
            top: 0;
            width: 100%;
            height: 100%;
            overflow: auto;
            background-color: rgba(0,0,0,0.4);
        }

        .balance-form {
            background-color: #fefefe;
            margin: 15% auto;
            padding: 20px;
            border: 1px solid #888;
            width: 30%;
        }
        
    </style>

</body>
</html>
